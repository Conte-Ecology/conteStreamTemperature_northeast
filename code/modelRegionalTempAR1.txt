
    model{
      # Likelihood
      for(i in 1:nFirstObsRows) {
        trend[firstObsRows[i]] <- inprod(B.0[], X.0[firstObsRows[i], ]) + 
          inprod(B.site[site[firstObsRows[i]], ], X.site[firstObsRows[i], ]) + 
          inprod(B.huc[huc[firstObsRows[i]], ], X.site[firstObsRows[i], ]) + 
          inprod(B.year[year[firstObsRows[i]], ], X.year[firstObsRows[i], ])
        
        stream.mu[firstObsRows[i]] <- trend[firstObsRows[i]]
      }
      # restart counter for each deployment
      for(i in 1:nEvalRows) {
        trend[evalRows[i]] <- inprod(B.0[], X.0[evalRows[i], ]) + 
          inprod(B.site[site[evalRows[i]], ], X.site[evalRows[i], ]) + 
          inprod(B.huc[huc[evalRows[i]], ], X.site[evalRows[i], ]) + 
          inprod(B.year[year[evalRows[i]], ], X.year[evalRows[i], ])
        
        stream.mu[evalRows[i]] <- trend[evalRows[i]] + B.ar1[site[evalRows[i]]] * (temp[evalRows[i]-1] - trend[evalRows[i]-1])
      }
      
      for(i in 1:n) {
        temp[i] ~ dnorm(stream.mu[i], tau) # T(0, 50) - truncation causes MCMC problem: no mixing/movement
        residuals[i] <- temp[i] - stream.mu[i]
      }
      
      # Prior for autoregressive
      #B.ar1 ~ dunif(-1, 1)
      for(j in 1:J){ # J sites
        B.ar1[j] ~ dnorm(mu.ar1, tau.ar1)T(-1, 1)
      }
      mu.ar1 ~ dunif(-1, 1)
      sigma.ar1 ~ dunif(0, 10)
      tau.ar1 <- pow(sigma.ar1, -2)
      
      # prior for model variance
      sigma ~ dunif(0, 100)
      tau <- pow(sigma, -2)
      
      for(k in 1:K.0){
        B.0[k] ~ dnorm(0, 0.0001) # priors coefs for fixed effect predictors
      }
      
      # SITE Effects
      # Independent priors on random site effects
      for(k in 1:K) {
        sigma.b.site[k] ~ dunif(0, 100)
        tau.b.site[k] <- 1 / (sigma.b.site[k] * sigma.b.site[k])
        for(j in 1:J){ # J sites
          B.site[j, k] ~ dnorm(0, tau.b.site[k])
        }
      }
      
      # HUC Effects
      # Priors for random effects of huc
      for(m in 1:M){ # M hucs
        B.huc.raw[m, 1:K] ~ dmnorm(mu.huc.raw[1:K], tau.B.huc.raw[ , ])
      }
      mu.huc.raw[1] <- 0 # this would not be necessary if I didn't include an overall intercept term. The only difference is whether correlation is allowed between parameters and the intercept (currently not).
#mu.huc[1] <- xi.huc[1] * mu.huc.raw[1]
#xi.huc[1] <- 0
xi.huc[1] ~ dunif(0, 100)
      for(k in 2:K){
        mu.huc.raw[k] ~ dnorm(0, 0.0001)
mu.huc[k] <- xi.huc[k] * mu.huc.raw[k]
xi.huc[k] ~ dunif(0, 100)
      }

for(m in 1:M) {
  for(k in 1:K) {
    B.huc[m, k] <- xi.huc[k] * B.huc.raw[m, k]
  }
}

      # Prior on multivariate normal std deviation
      tau.B.huc.raw[1:K, 1:K] ~ dwish(W.huc[ , ], df.huc)
      df.huc <- K + 1
      sigma.B.huc.raw[1:K, 1:K] <- inverse(tau.B.huc.raw[ , ])
      for(k in 1:K){
        for(k.prime in 1:K){
          rho.B.huc[k, k.prime] <- sigma.B.huc.raw[k, k.prime]/sqrt(sigma.B.huc.raw[k, k]*sigma.B.huc.raw[k.prime, k.prime])
        }
      }

#sigma.b.huc[1] <- sqrt(sigma.B.huc.raw[1, 1])
for(k in 1:K) {
sigma.b.huc[k] <- abs(xi.huc[k]) * sqrt(sigma.B.huc.raw[k, k])
}
      
      # YEAR EFFECTS
      # Priors for random effects of year
      for(t in 1:Ti){ # Ti years
        B.year.raw[t, 1:L] ~ dmnorm(mu.year.raw[1:L], tau.B.year.raw[ , ])
}
      mu.year.raw[1] <- 0 # this would not be necessary if I didn't include an overall intercept term. The only difference is whether correlation is allowed between parameters and the intercept (currently not).
      mu.year[1] <- xi.year[1] * mu.year.raw[1]
     # xi.year[1] <- 0
xi.year[1] ~ dunif(0, 100)
      for(l in 2:L){
      mu.year.raw[l] ~ dnorm(0, 0.0001)
      mu.year[l] <- xi.year[l] * mu.year.raw[l]
      xi.year[l] ~ dunif(0, 100)
      }
      
      for(t in 1:Ti) {
      for(l in 1:L) {
      B.year[t, l] <- xi.year[l] * B.year.raw[t, l]
      }
      }
      
      # Prior on multivariate normal std deviation
      tau.B.year.raw[1:L, 1:L] ~ dwish(W.year[ , ], df.year)
      df.year <- L + 1
      sigma.B.year.raw[1:L, 1:L] <- inverse(tau.B.year.raw[ , ])
      for(l in 1:L){
      for(l.prime in 1:L){
      rho.B.year[l, l.prime] <- sigma.B.year.raw[l, l.prime]/sqrt(sigma.B.year.raw[l, l]*sigma.B.year.raw[l.prime, l.prime])
      }
      }
      
      #sigma.b.year[1] <- sqrt(sigma.B.year.raw[1, 1])
      for(l in 1:L) {
      sigma.b.year[l] <- abs(xi.year[l]) * sqrt(sigma.B.year.raw[l, l])
      }
      
      # Derived parameters
      
    }
      
